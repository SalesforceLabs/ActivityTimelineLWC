<!--
Author: Doug Ayers
Website: https://douglascayers.com
GitHub: https://github.com/douglascayers/sfdx-lightning-api-component
License: BSD 3-Clause License
 -->
<!--
    For performance, turn off as much of the normal Salesforce page content.
 -->
<apex:page applyHtmlTag="false"
           applyBodyTag="false"
           showHeader="false"
           showChat="false"
           standardStylesheets="false"
           sideBar="false"
           docType="html-5.0">

<html>

    <head>
        <apex:includeScript value="{!$Resource.penpal}"/>
        <apex:includeScript value="{!$Resource.jsforce}"/>
    </head>

    <body>

        <script>

            const jsforceConn = new jsforce.Connection({
                accessToken: '{!$Api.Session_Id}',
                version: '62.0'
            });

            const penpalConn = Penpal.connectToParent({
                methods: {
                    restRequest,
                    fetchRequest
                }
            });

            /**
             * Makes a Salesforce REST API request and returns a promise that resolves to the response.
             * See the LC_API.cmp for documentation on usage.
             */
            function restRequest( request ) {
                return new Promise( function( resolve, reject ) {
                    jsforceConn.request( request ).then( function( response ) {
                        resolve({
                            success: true,
                            data: response
                        });
                    }).catch( function( err ) {
                        // Have to resolve because if reject
                        // then whole post message operation fails,
                        // so wrapping our response with our own
                        // success flag to denote if any errors.
                        resolve( formatError( err ) );
                    });
                });
            };

            /**
             * Makes a JavaScript Fetch request and returns a promise that resolves to the response.
             * See the LC_API.cmp for documentation on usage.
             */
            function fetchRequest( request ) {
                return new Promise( function( resolve, reject ) {
                    fetch( request.url, request.options ).then( function( response ) {
                        if ( response.ok ) {
                            // Although the Fetch's Response has a .json() method,
                            // the response body might not conform to JSON and would error.
                            // Instead, we read the response as text and then use our
                            // utility `getAsJsonOrText` to convert it to JSON if appropriate.
                            response.text().then( function( responseText ) {
                                resolve({
                                    success: true,
                                    data: getAsJsonOrText( responseText )
                                });
                            });
                        } else {
                            resolve({
                                success: false,
                                data: response.statusText
                            });
                        }
                    }).catch( function( err ) {
                        // Have to resolve because if reject
                        // then whole post message operation fails,
                        // so wrapping our response with our own
                        // success flag to denote if any errors.
                        resolve( formatError( err ) );
                    });
                });
            };

            /**
             * Formats the error object into our common data structure
             * for communicating to the Penpal parent.
             *
             * @param error
             *      JavaScript error object obtained from a promise catch method.
             * @returns { { data: any, success: boolean } }
             */
            function formatError( error ) {
                // If the server's response body was JSON but the status code
                // indicated an error, the response body is treated
                // as a string and set to Error.message property.
                // To propogate the original JSON payload as JSON then
                // we try to parse it as JSON. If the parse fails then
                // we just resolve with the Error.message string anyways.
                return ({
                    success: false,
                    data: getAsJsonOrText( error.message ) // postMessage cannot deserialize the Error object, so pick off the message
                });
            }

            /**
             * If content can be parsed by `JSON.parse` then the json is returned,
             * otherwise, the content as-is is returned instead.
             */
            function getAsJsonOrText( content ) {
                try {
                    return JSON.parse( content );
                } catch ( e ) {
                    return content;
                }
            }

        </script>

    </body>

</html>

</apex:page>
<!--
BSD 3-Clause License

Copyright (c) 2018-2019, Doug Ayers, douglascayers.com
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->